@model TestWebUpdated.Models.CalendarViewModel
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Calendar</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .calendar {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 1px;
            border: 1px solid #dee2e6;
            background-color: #dee2e6;
        }

        .day {
            background-color: white;
            height: 100px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 1px solid #dee2e6;
            box-sizing: border-box;
        }

        .day-header {
            background-color: #f8f9fa;
            height: 50px;
            display: flex;
            align-items: center;
            justify-content: center;
            border: 1px solid #dee2e6;
            font-weight: bold;
        }

        .marked {
            background-color: red;
            color: white;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        <h2 class="text-center">Interactive Bootstrap Calendar</h2>

        <!-- Month Selector -->
        <div class="d-flex justify-content-between align-items-center my-3">
            <button id="prevMonth" class="btn btn-secondary">Previous</button>
            <h4 id="currentMonth"></h4>
            <button id="nextMonth" class="btn btn-secondary">Next</button>
        </div>

        <!-- Calendar -->
        <div id="calendar">
            <div id="day-headers" class="calendar">
                <div class="day-header">Sun</div>
                <div class="day-header">Mon</div>
                <div class="day-header">Tue</div>
                <div class="day-header">Wed</div>
                <div class="day-header">Thu</div>
                <div class="day-header">Fri</div>
                <div class="day-header">Sat</div>
            </div>
            <div id="calendar-days" class="calendar"></div>
        </div>

        <!-- Date Picker Form -->
        <form action="AddDate" id="datePickerForm" method="post" class="mt-4">
            <label for="appointmentName">Appointment Name:</label>
            <input type="text" id="appointmentName" name="AppointmentName" class="form-control w-25 mb-3" required />
            <span asp-validation-for="AppointmentName" class="text-danger"></span>
            <label for="datePicker">Pick a Date:</label>
            <input type="date" id="datePicker" name="ScheduleDate" class="form-control w-25 mb-3" required />
            <span asp-validation-for="ScheduleDate" class="text-danger"></span>
            <button type="submit" class="btn btn-primary">Submit</button>
        </form>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const calendarDays = document.getElementById('calendar-days');
            const currentMonthEl = document.getElementById('currentMonth');
            const prevMonthBtn = document.getElementById('prevMonth');
            const nextMonthBtn = document.getElementById('nextMonth');

            let currentDate = new Date();

            // Occupied dates from the server
            let occupiedDates = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.OccupiedDate));

            // Calculate days in a month
            function getDaysInMonth(year, month) {
                return new Date(year, month + 1, 0).getDate();
            }

            // Render calendar
            function renderCalendar() {
                const year = currentDate.getFullYear();
                const month = currentDate.getMonth();
                const daysInMonth = getDaysInMonth(year, month);
                const firstDayOfWeek = new Date(year, month, 1).getDay();

                currentMonthEl.textContent = currentDate.toLocaleString('default', { month: 'long', year: 'numeric' });

                calendarDays.innerHTML = '';

                // Empty cells before the first day
                for (let i = 0; i < firstDayOfWeek; i++) {
                    const emptyDiv = document.createElement('div');
                    emptyDiv.className = 'day';
                    calendarDays.appendChild(emptyDiv);
                }

                // Days of the month
                for (let i = 1; i <= daysInMonth; i++) {
                    const dayDiv = document.createElement('div');
                    dayDiv.className = 'day';

                    const dateString = new Date(year, month, i).toISOString().split('T')[0];

                    // Mark occupied dates
                    if (occupiedDates.includes(dateString)) {
                        dayDiv.classList.add('marked');
                    }

                    dayDiv.textContent = i;
                    calendarDays.appendChild(dayDiv);
                }
            }

            // Navigation
            prevMonthBtn.addEventListener('click', function () {
                currentDate.setMonth(currentDate.getMonth() - 1);
                renderCalendar();
            });

            nextMonthBtn.addEventListener('click', function () {
                currentDate.setMonth(currentDate.getMonth() + 1);
                renderCalendar();
            });

            // Handle form submission
            document.getElementById('datePickerForm').addEventListener('submit', function (e) {
                e.preventDefault();

                const appointmentName = document.getElementById('appointmentName').value;
                const scheduleDate = document.getElementById('datePicker').value;

                fetch('/Calendar/AddDate', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ AppointmentName: appointmentName, ScheduleDate: scheduleDate })
                })
                    .then(response => response.json())
                    .then(data => {
                        occupiedDates = data.occupiedDates; // Update occupied dates
                        renderCalendar(); // Re-render the calendar
                    })
                    .catch(error => console.error('Error:', error));
            });

            renderCalendar();
        });
    </script>
</body>
</html>
